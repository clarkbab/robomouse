#! /usr/bin/env python3

import sys
import numpy as np
import mice
import pdb
import turtle
from optparse import OptionParser
from maze import Maze
from display import Display
from controller import Controller
from heading import Heading

if __name__ == '__main__':
    # Parse options.
    parser = OptionParser()
    parser.add_option('-d', '--delay', dest='delay', help='delay between steps in ms.', default=0, type='int')
    parser.add_option('-D', '--display', action='store_true', dest='display', help='show display', default=False)
    parser.add_option('-r', '--runs', dest='runs', help='run the game n times and average the score.', default=1, type='int')
    parser.add_option('-M', '--maze', dest='maze', help='path to a maze file.')
    parser.add_option('-m', '--mouse', dest='mouse', help='path to a mouse file.')
    parser.add_option('-p', '--pause', action='store_true', dest='pause', help='pause between runs', default=False)
    parser.add_option('-s', '--max_steps', dest='max_steps', help='max number of steps per run.', default=1000, type='int') 
    parser.add_option('-v', '--verbose', action='store_true', dest='verbose', help='log info.', default=False)
    opts, args = parser.parse_args()

    # Create the maze.
    maze = Maze(opts.maze)
        
    # Create and place the mouse.
    mouse_class = getattr(mice, opts.mouse)
    pos = [0, 0]
    heading = Heading.NORTH
    init_state = { 'pos': pos, 'heading': heading }
    mouse = mouse_class(maze.dim, init_state, opts.verbose)

    # Create the controller.
    controller = Controller(
        mouse,
        maze,
        init_state,
        max_steps=opts.max_steps,
        delay=opts.delay,
        pause=opts.pause,
        verbose=opts.verbose
    )

    # Run game r times.
    scores = np.array([])
    finished = 0
    for i in range(opts.runs):
        if opts.display:
            display = Display(maze)
            controller.run_with_display(display)
        else:
            controller.run_normal()

        # Calculate score.
        score = controller.score()
        if score:
            finished += 1
            scores = np.append(scores, score)
            
    # Show results.
    perc_fin = 100 * finished / opts.runs
    print(f"Finished: {perc_fin}% [{finished}/{opts.runs}]")

    # We may not have finished any runs.
    if len(scores) == 0:
        print(f"No average score.")
    else:
        print(f"Average score: {scores.mean()}")
        print(f"Standard dev.: {scores.std()}")

    sys.exit(0)

